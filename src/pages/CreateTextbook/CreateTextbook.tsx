import React, { useState, useEffect } from "react";
import { useNavigate, useParams, useLocation } from "react-router-dom";
import { message } from "antd";
import styles from "./CreateTextbook.module.scss";
import { createTextbook, getAllSubjects } from "../../api/api-utils";
import { useSelector } from "react-redux";
import { RootState } from "../../store";

interface Subject {
  idSubject: number;
  name: string;
}

export const CreateTextbook: React.FC = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { id: paramSubjectId } = useParams();
  const stateSubjectId = location.state?.idSubject;
  const user = useSelector((state: RootState) => state.user);

  const [messageApi, contextHolder] = message.useMessage();
  const [loading, setLoading] = useState<boolean>(false);
  const [subjects, setSubjects] = useState<Subject[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [file, setFile] = useState<File | null>(null);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL, state –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
  const initialSubjectId = paramSubjectId || stateSubjectId || "";

  // Form state
  const [formData, setFormData] = useState({
    idSubject: initialSubjectId.toString(),
    name: "",
    year: new Date().getFullYear().toString(),
    authors: "",
    isbn: "",
  });

  useEffect(() => {
    const fetchSubjects = async () => {
      try {
        setLoading(true);
        const response = await getAllSubjects(user.accessToken);
        setSubjects(response.subjects);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:", err);
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤");
        messageApi.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤");
      } finally {
        setLoading(false);
      }
    };

    fetchSubjects();
  }, [user.accessToken, messageApi]);

  const handleInputChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement
    >
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setFile(e.target.files[0]);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (
      !formData.idSubject ||
      !formData.name ||
      !formData.year ||
      !formData.authors ||
      !formData.isbn
    ) {
      setError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è");
      messageApi.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è");
      return;
    }

    if (!file) {
      setError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —É—á–µ–±–Ω–∏–∫–∞");
      messageApi.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —É—á–µ–±–Ω–∏–∫–∞");
      return;
    }

    try {
      setLoading(true);
      setError(null);

      const textbookFormData = new FormData();
      textbookFormData.append("idSubject", formData.idSubject);
      textbookFormData.append("name", formData.name);
      textbookFormData.append("year", formData.year);
      textbookFormData.append("authors", formData.authors);
      textbookFormData.append("isbn", formData.isbn);
      textbookFormData.append("textbookFile", file);

      await createTextbook(textbookFormData, user.accessToken);

      messageApi.success("–£—á–µ–±–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–µ–±–Ω–∏–∫–æ–≤
      if (formData.idSubject) {
        navigate(`/subject/${formData.idSubject}`);
      } else {
        navigate("/textbooks");
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—á–µ–±–Ω–∏–∫–∞:", err);
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É—á–µ–±–Ω–∏–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      messageApi.error(
        "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É—á–µ–±–Ω–∏–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
      );
    } finally {
      setLoading(false);
    }
  };

  const currentYear = new Date().getFullYear();
  const yearOptions = Array.from(
    { length: 30 },
    (_, i) => currentYear - 15 + i
  );

  return (
    <div className={styles.createTextbook}>
      {contextHolder}

      <div className={styles.createTextbook__header}>
        <div className={styles.createTextbook__headerIcon}>üìö</div>
        <h1 className={styles.createTextbook__title}>
          –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—á–µ–±–Ω–∏–∫–∞
        </h1>
        <p className={styles.createTextbook__subtitle}>
          –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —É—á–µ–±–Ω–∏–∫ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        </p>
      </div>

      {error && (
        <div className={styles.createTextbook__error}>
          <div className={styles.createTextbook__errorIcon}>‚ö†Ô∏è</div>
          <p>{error}</p>
        </div>
      )}

      <form className={styles.createTextbook__form} onSubmit={handleSubmit}>
        <div className={styles.createTextbook__formSection}>
          <h2 className={styles.createTextbook__sectionTitle}>
            –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          </h2>

          <div className={styles.createTextbook__formGroup}>
            <label htmlFor="idSubject" className={styles.createTextbook__label}>
              –ü—Ä–µ–¥–º–µ—Ç <span className={styles.createTextbook__required}>*</span>
            </label>
            <div className={styles.createTextbook__inputWrapper}>
              <select
                id="idSubject"
                name="idSubject"
                value={formData.idSubject}
                onChange={handleInputChange}
                className={styles.createTextbook__select}
                required
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç</option>
                {subjects.map((subject) => (
                  <option key={subject.idSubject} value={subject.idSubject}>
                    {subject.name}
                  </option>
                ))}
              </select>
              <div className={styles.createTextbook__inputIcon}>üìö</div>
            </div>
          </div>

          <div className={styles.createTextbook__formGroup}>
            <label htmlFor="name" className={styles.createTextbook__label}>
              –ù–∞–∑–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–∏–∫–∞{" "}
              <span className={styles.createTextbook__required}>*</span>
            </label>
            <div className={styles.createTextbook__inputWrapper}>
              <input
                type="text"
                id="name"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                className={styles.createTextbook__input}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–∏–∫–∞"
                required
              />
              <div className={styles.createTextbook__inputIcon}>üìñ</div>
            </div>
          </div>

          <div className={styles.createTextbook__formGrid}>
            <div className={styles.createTextbook__formGroup}>
              <label htmlFor="year" className={styles.createTextbook__label}>
                –ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è{" "}
                <span className={styles.createTextbook__required}>*</span>
              </label>
              <div className={styles.createTextbook__inputWrapper}>
                <select
                  id="year"
                  name="year"
                  value={formData.year}
                  onChange={handleInputChange}
                  className={styles.createTextbook__select}
                  required
                >
                  {yearOptions.map((year) => (
                    <option key={year} value={year}>
                      {year}
                    </option>
                  ))}
                </select>
                <div className={styles.createTextbook__inputIcon}>üìÖ</div>
              </div>
            </div>

            <div className={styles.createTextbook__formGroup}>
              <label htmlFor="isbn" className={styles.createTextbook__label}>
                ISBN <span className={styles.createTextbook__required}>*</span>
              </label>
              <div className={styles.createTextbook__inputWrapper}>
                <input
                  type="text"
                  id="isbn"
                  name="isbn"
                  value={formData.isbn}
                  onChange={handleInputChange}
                  className={styles.createTextbook__input}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 978-3-16-148410-0"
                  required
                />
                <div className={styles.createTextbook__inputIcon}>üî¢</div>
              </div>
            </div>
          </div>

          <div className={styles.createTextbook__formGroup}>
            <label htmlFor="authors" className={styles.createTextbook__label}>
              –ê–≤—Ç–æ—Ä—ã <span className={styles.createTextbook__required}>*</span>
            </label>
            <div className={styles.createTextbook__inputWrapper}>
              <input
                type="text"
                id="authors"
                name="authors"
                value={formData.authors}
                onChange={handleInputChange}
                className={styles.createTextbook__input}
                placeholder="–£–∫–∞–∂–∏—Ç–µ –∞–≤—Ç–æ—Ä–æ–≤ —É—á–µ–±–Ω–∏–∫–∞"
                required
              />
              <div className={styles.createTextbook__inputIcon}>üë•</div>
            </div>
          </div>
        </div>

        <div className={styles.createTextbook__formSection}>
          <h2 className={styles.createTextbook__sectionTitle}>–§–∞–π–ª —É—á–µ–±–Ω–∏–∫–∞</h2>

          <div className={styles.createTextbook__formGroup}>
            <label htmlFor="file" className={styles.createTextbook__label}>
              –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª{" "}
              <span className={styles.createTextbook__required}>*</span>
            </label>
            <div className={styles.createTextbook__fileInputWrapper}>
              <input
                type="file"
                id="file"
                onChange={handleFileChange}
                className={styles.createTextbook__fileInput}
                accept=".pdf,.doc,.docx"
                required
              />
              <div className={styles.createTextbook__fileInputLabel}>
                <div className={styles.createTextbook__fileInputIcon}>üìé</div>
                <span>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –µ–≥–æ —Å—é–¥–∞</span>
              </div>
            </div>
            {file && (
              <div className={styles.createTextbook__fileSelected}>
                <div className={styles.createTextbook__fileIcon}>üìÑ</div>
                <div className={styles.createTextbook__fileInfo}>
                  <span className={styles.createTextbook__fileName}>
                    {file.name}
                  </span>
                  <span className={styles.createTextbook__fileSize}>
                    {(file.size / 1024).toFixed(2)} KB
                  </span>
                </div>
              </div>
            )}
            <p className={styles.createTextbook__inputHint}>
              –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, DOC, DOCX
            </p>
          </div>
        </div>

        <div className={styles.createTextbook__actions}>
          <button
            type="button"
            className={styles.createTextbook__cancelButton}
            onClick={() => navigate(-1)}
            disabled={loading}
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          <button
            type="submit"
            className={styles.createTextbook__submitButton}
            disabled={loading}
          >
            {loading ? (
              <>
                <span className={styles.createTextbook__buttonSpinner}></span>
                <span>–°–æ–∑–¥–∞–Ω–∏–µ...</span>
              </>
            ) : (
              "–°–æ–∑–¥–∞—Ç—å —É—á–µ–±–Ω–∏–∫"
            )}
          </button>
        </div>
      </form>
    </div>
  );
};
